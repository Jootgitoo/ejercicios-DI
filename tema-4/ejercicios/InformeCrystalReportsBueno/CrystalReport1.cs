//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InformeCrystalReportsBueno {
    using System;
    using System.ComponentModel;
    using CrystalDecisions.Shared;
    using CrystalDecisions.ReportSource;
    using CrystalDecisions.CrystalReports.Engine;


    /// <summary>
    /// Class CrystalReport1.
    /// Implements the <see cref="ReportClass" />
    /// </summary>
    /// <seealso cref="ReportClass" />
    public class CrystalReport1 : ReportClass {

        /// <summary>
        /// Initializes a new instance of the <see cref="CrystalReport1"/> class.
        /// </summary>
        public CrystalReport1() {
        }

        /// <summary>
        /// Gets or sets the name of the resource.
        /// </summary>
        /// <value>The name of the resource.</value>
        public override string ResourceName {
            get {
                return "CrystalReport1.rpt";
            }
            set {
                // Do nothing
            }
        }

        /// <summary>
        /// Creates new generator.
        /// </summary>
        /// <value><c>true</c> if [new generator]; otherwise, <c>false</c>.</value>
        public override bool NewGenerator {
            get {
                return true;
            }
            set {
                // Do nothing
            }
        }

        /// <summary>
        /// Gets or sets the full name of the resource.
        /// </summary>
        /// <value>The full name of the resource.</value>
        public override string FullResourceName {
            get {
                return "InformeCrystalReportsBueno.CrystalReport1.rpt";
            }
            set {
                // Do nothing
            }
        }

        /// <summary>
        /// Gets the section1.
        /// </summary>
        /// <value>The section1.</value>
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section1 {
            get {
                return this.ReportDefinition.Sections[0];
            }
        }

        /// <summary>
        /// Gets the section2.
        /// </summary>
        /// <value>The section2.</value>
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section2 {
            get {
                return this.ReportDefinition.Sections[1];
            }
        }

        /// <summary>
        /// Gets the section3.
        /// </summary>
        /// <value>The section3.</value>
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section3 {
            get {
                return this.ReportDefinition.Sections[2];
            }
        }

        /// <summary>
        /// Gets the section4.
        /// </summary>
        /// <value>The section4.</value>
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section4 {
            get {
                return this.ReportDefinition.Sections[3];
            }
        }

        /// <summary>
        /// Gets the section5.
        /// </summary>
        /// <value>The section5.</value>
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section5 {
            get {
                return this.ReportDefinition.Sections[4];
            }
        }
    }

    /// <summary>
    /// Class CachedCrystalReport1.
    /// Implements the <see cref="Component" />
    /// Implements the <see cref="ICachedReport" />
    /// </summary>
    /// <seealso cref="Component" />
    /// <seealso cref="ICachedReport" />
    [System.Drawing.ToolboxBitmapAttribute(typeof(CrystalDecisions.Shared.ExportOptions), "report.bmp")]
    public class CachedCrystalReport1 : Component, ICachedReport {

        /// <summary>
        /// Initializes a new instance of the <see cref="CachedCrystalReport1"/> class.
        /// </summary>
        public CachedCrystalReport1() {
        }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is cacheable.
        /// </summary>
        /// <value><c>true</c> if this instance is cacheable; otherwise, <c>false</c>.</value>
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool IsCacheable {
            get {
                return true;
            }
            set {
                // 
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether [share database logon information].
        /// </summary>
        /// <value><c>true</c> if [share database logon information]; otherwise, <c>false</c>.</value>
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool ShareDBLogonInfo {
            get {
                return false;
            }
            set {
                // 
            }
        }

        /// <summary>
        /// Gets or sets the cache time out.
        /// </summary>
        /// <value>The cache time out.</value>
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual System.TimeSpan CacheTimeOut {
            get {
                return CachedReportConstants.DEFAULT_TIMEOUT;
            }
            set {
                // 
            }
        }

        /// <summary>
        /// Creates the report.
        /// </summary>
        /// <returns>CrystalDecisions.CrystalReports.Engine.ReportDocument.</returns>
        public virtual CrystalDecisions.CrystalReports.Engine.ReportDocument CreateReport() {
            CrystalReport1 rpt = new CrystalReport1();
            rpt.Site = this.Site;
            return rpt;
        }

        /// <summary>
        /// Gets the customized cache key.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <returns>System.String.</returns>
        public virtual string GetCustomizedCacheKey(RequestContext request) {
            String key = null;
            // // The following is the code used to generate the default
            // // cache key for caching report jobs in the ASP.NET Cache.
            // // Feel free to modify this code to suit your needs.
            // // Returning key == null causes the default cache key to
            // // be generated.
            // 
            // key = RequestContext.BuildCompleteCacheKey(
            //     request,
            //     null,       // sReportFilename
            //     this.GetType(),
            //     this.ShareDBLogonInfo );
            return key;
        }
    }
}
